#! /usr/bin/perl

use strict; 
use warnings; 

if (@ARGV != 0)
{
	my $usage = qq {
usage: indexParser.pl

Generates a simple html page that links to each file in the recipes 
directory. Intended to create the master list of recipes. 

Outputs the generated file as index.html	
}; 

	print $usage;
	exit 1; 
}

my $outputFile = "index.html";
my @recipes = glob "recipes/*.html"; 

# If no files are returned, abort 
if (@recipes <= 0)
{
	print "Unable to find any recipes in recipes/. Aborting.\n";
	exit 2;
}

# Sort the files alphabetically. They should all be lowercased already, but 
# just in case, make the titles lowercase. 
my @sortedRecipes = sort {lc ($a) cmp lc($b) } @recipes;

# Generate the output file
open my $output, '>', $outputFile or die "Unable to open output file $outputFile: $!";

my $html = qq {<html>

<!-- Autogenerated with indexParser.pl -->

<head>
	<title>Recipe List</title>
	<meta charset = "utf-8">
	<meta name = "viewport" content = "width=device-width, initial-scale = 1.0">
	<link rel = "stylesheet" type = "text/css" href = "/main.css">
</head>

<body>
	<div class = "index">
		<h1> Recipe Index </h1>

		<ul>
}; 

print $output "$html"; 

foreach my $recipe (@sortedRecipes)
{
	chomp $recipe; 
	my $title = "";

	open my $recFile, '<', $recipe;
	while (my $line = <$recFile> )
	{
		if ($line =~ /<title>Recipe for (.*)<\/title>/)
		{
			$title = $1; 
			chomp $title; 
		}
	}
	# Get the title of the recipe from the filename and clean it up. 
	$recipe =~ /\/([a-z0-9\-]+\.html)$/;
	$recipe = "recipes/$1"; 

	# # Replace hyphens with spaces, take out the directories and the file extension.
	# # Recapitalize the words correctly. 
	# $recipe =~ /\/([a-z\-]+)\.html$/; 
	# # my $title = $1; 
	# # $title =~ s/-/ /g; 
	# # $title =~ s/([\w']+)/\u\L$1/g; 

	print $output "\t\t\t<li> <a href = \"$recipe\" > $title </a> </li>\n";
}

$html = qq {\t\t</ul>
	</div>

</body>

</html>
}; 

print $output "$html";
